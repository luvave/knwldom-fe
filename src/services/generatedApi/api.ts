/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  CreateUser200,
  UserDto,
  AddRelationType200,
  RelationTypeDto,
  AddRelation200,
  RelationDto,
  CreateKnowledgeGraph200,
  NewKnowledgeGraphDto,
  PublicEndpoint200,
  GetUsersBySubstringParams,
  GetUserInfo200,
  UserGraphDto,
  KnowledgeGraphTypeDto,
} from '../../types/generatedApi';
import { apiClientInstance } from '../../utils/apiClients/apiClientInstance';
import type { ErrorType } from '../../utils/apiClients/apiClientInstance';

export const createUser = (userDto: UserDto) => {
  return apiClientInstance<CreateUser200>({
    url: `/api/user/add`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: userDto,
  });
};

export const getCreateUserMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError, { data: UserDto }, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError, { data: UserDto }, TContext> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUser>>, { data: UserDto }> = (props) => {
    const { data } = props ?? {};

    return createUser(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>;
export type CreateUserMutationBody = UserDto;
export type CreateUserMutationError = ErrorType<unknown>;

export const useCreateUser = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError, { data: UserDto }, TContext>;
}) => {
  const mutationOptions = getCreateUserMutationOptions(options);

  return useMutation(mutationOptions);
};

export const addRelationType = (relationTypeDto: RelationTypeDto) => {
  return apiClientInstance<AddRelationType200>({
    url: `/api/relation/types/add`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: relationTypeDto,
  });
};

export const getAddRelationTypeMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addRelationType>>,
    TError,
    { data: RelationTypeDto },
    TContext
  >;
}): UseMutationOptions<Awaited<ReturnType<typeof addRelationType>>, TError, { data: RelationTypeDto }, TContext> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof addRelationType>>, { data: RelationTypeDto }> = (
    props,
  ) => {
    const { data } = props ?? {};

    return addRelationType(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddRelationTypeMutationResult = NonNullable<Awaited<ReturnType<typeof addRelationType>>>;
export type AddRelationTypeMutationBody = RelationTypeDto;
export type AddRelationTypeMutationError = ErrorType<unknown>;

export const useAddRelationType = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addRelationType>>,
    TError,
    { data: RelationTypeDto },
    TContext
  >;
}) => {
  const mutationOptions = getAddRelationTypeMutationOptions(options);

  return useMutation(mutationOptions);
};

export const addRelation = (relationDto: RelationDto) => {
  return apiClientInstance<AddRelation200>({
    url: `/api/relation/add`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: relationDto,
  });
};

export const getAddRelationMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof addRelation>>, TError, { data: RelationDto }, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof addRelation>>, TError, { data: RelationDto }, TContext> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof addRelation>>, { data: RelationDto }> = (props) => {
    const { data } = props ?? {};

    return addRelation(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddRelationMutationResult = NonNullable<Awaited<ReturnType<typeof addRelation>>>;
export type AddRelationMutationBody = RelationDto;
export type AddRelationMutationError = ErrorType<unknown>;

export const useAddRelation = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof addRelation>>, TError, { data: RelationDto }, TContext>;
}) => {
  const mutationOptions = getAddRelationMutationOptions(options);

  return useMutation(mutationOptions);
};

export const createKnowledgeGraph = (newKnowledgeGraphDto: NewKnowledgeGraphDto) => {
  return apiClientInstance<CreateKnowledgeGraph200>({
    url: `/api/graph/add`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: newKnowledgeGraphDto,
  });
};

export const getCreateKnowledgeGraphMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createKnowledgeGraph>>,
    TError,
    { data: NewKnowledgeGraphDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createKnowledgeGraph>>,
  TError,
  { data: NewKnowledgeGraphDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createKnowledgeGraph>>,
    { data: NewKnowledgeGraphDto }
  > = (props) => {
    const { data } = props ?? {};

    return createKnowledgeGraph(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateKnowledgeGraphMutationResult = NonNullable<Awaited<ReturnType<typeof createKnowledgeGraph>>>;
export type CreateKnowledgeGraphMutationBody = NewKnowledgeGraphDto;
export type CreateKnowledgeGraphMutationError = ErrorType<unknown>;

export const useCreateKnowledgeGraph = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createKnowledgeGraph>>,
    TError,
    { data: NewKnowledgeGraphDto },
    TContext
  >;
}) => {
  const mutationOptions = getCreateKnowledgeGraphMutationOptions(options);

  return useMutation(mutationOptions);
};

export const publicEndpoint = (signal?: AbortSignal) => {
  return apiClientInstance<PublicEndpoint200>({ url: `/public/`, method: 'get', signal });
};

export const getPublicEndpointQueryKey = () => [`/public/`] as const;

export const getPublicEndpointQueryOptions = <
  TData = Awaited<ReturnType<typeof publicEndpoint>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof publicEndpoint>>, TError, TData>;
}): UseQueryOptions<Awaited<ReturnType<typeof publicEndpoint>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPublicEndpointQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof publicEndpoint>>> = ({ signal }) => publicEndpoint(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type PublicEndpointQueryResult = NonNullable<Awaited<ReturnType<typeof publicEndpoint>>>;
export type PublicEndpointQueryError = ErrorType<unknown>;

export const usePublicEndpoint = <
  TData = Awaited<ReturnType<typeof publicEndpoint>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof publicEndpoint>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getPublicEndpointQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getUsersBySubstring = (params: GetUsersBySubstringParams, signal?: AbortSignal) => {
  return apiClientInstance<UserDto[]>({ url: `/api/user/search`, method: 'get', params, signal });
};

export const getGetUsersBySubstringQueryKey = (params: GetUsersBySubstringParams) =>
  [`/api/user/search`, ...(params ? [params] : [])] as const;

export const getGetUsersBySubstringQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersBySubstring>>,
  TError = ErrorType<unknown>,
>(
  params: GetUsersBySubstringParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getUsersBySubstring>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<typeof getUsersBySubstring>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersBySubstringQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersBySubstring>>> = ({ signal }) =>
    getUsersBySubstring(params, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetUsersBySubstringQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersBySubstring>>>;
export type GetUsersBySubstringQueryError = ErrorType<unknown>;

export const useGetUsersBySubstring = <
  TData = Awaited<ReturnType<typeof getUsersBySubstring>>,
  TError = ErrorType<unknown>,
>(
  params: GetUsersBySubstringParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getUsersBySubstring>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUsersBySubstringQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getUserInfo = (signal?: AbortSignal) => {
  return apiClientInstance<GetUserInfo200>({ url: `/api/user/me`, method: 'get', signal });
};

export const getGetUserInfoQueryKey = () => [`/api/user/me`] as const;

export const getGetUserInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserInfo>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getUserInfo>>, TError, TData>;
}): UseQueryOptions<Awaited<ReturnType<typeof getUserInfo>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserInfoQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserInfo>>> = ({ signal }) => getUserInfo(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetUserInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getUserInfo>>>;
export type GetUserInfoQueryError = ErrorType<unknown>;

export const useGetUserInfo = <TData = Awaited<ReturnType<typeof getUserInfo>>, TError = ErrorType<unknown>>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getUserInfo>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUserInfoQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getUsers = (signal?: AbortSignal) => {
  return apiClientInstance<UserDto[]>({ url: `/api/user/`, method: 'get', signal });
};

export const getGetUsersQueryKey = () => [`/api/user/`] as const;

export const getGetUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>;
}): UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsers>>> = ({ signal }) => getUsers(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getUsers>>>;
export type GetUsersQueryError = ErrorType<unknown>;

export const useGetUsers = <TData = Awaited<ReturnType<typeof getUsers>>, TError = ErrorType<unknown>>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUsersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getRelationForGraph = (graphUri: string, signal?: AbortSignal) => {
  return apiClientInstance<RelationDto[]>({ url: `/api/relation/${graphUri}`, method: 'get', signal });
};

export const getGetRelationForGraphQueryKey = (graphUri: string) => [`/api/relation/${graphUri}`] as const;

export const getGetRelationForGraphQueryOptions = <
  TData = Awaited<ReturnType<typeof getRelationForGraph>>,
  TError = ErrorType<unknown>,
>(
  graphUri: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getRelationForGraph>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<typeof getRelationForGraph>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRelationForGraphQueryKey(graphUri);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRelationForGraph>>> = ({ signal }) =>
    getRelationForGraph(graphUri, signal);

  return { queryKey, queryFn, enabled: !!graphUri, ...queryOptions };
};

export type GetRelationForGraphQueryResult = NonNullable<Awaited<ReturnType<typeof getRelationForGraph>>>;
export type GetRelationForGraphQueryError = ErrorType<unknown>;

export const useGetRelationForGraph = <
  TData = Awaited<ReturnType<typeof getRelationForGraph>>,
  TError = ErrorType<unknown>,
>(
  graphUri: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getRelationForGraph>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRelationForGraphQueryOptions(graphUri, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getAllRelationTypes = (signal?: AbortSignal) => {
  return apiClientInstance<RelationTypeDto[]>({ url: `/api/relation/types`, method: 'get', signal });
};

export const getGetAllRelationTypesQueryKey = () => [`/api/relation/types`] as const;

export const getGetAllRelationTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllRelationTypes>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAllRelationTypes>>, TError, TData>;
}): UseQueryOptions<Awaited<ReturnType<typeof getAllRelationTypes>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllRelationTypesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllRelationTypes>>> = ({ signal }) =>
    getAllRelationTypes(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetAllRelationTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getAllRelationTypes>>>;
export type GetAllRelationTypesQueryError = ErrorType<unknown>;

export const useGetAllRelationTypes = <
  TData = Awaited<ReturnType<typeof getAllRelationTypes>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAllRelationTypes>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAllRelationTypesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGraphsForTheUser = (userId: string, signal?: AbortSignal) => {
  return apiClientInstance<UserGraphDto[]>({ url: `/api/graph/${userId}/all`, method: 'get', signal });
};

export const getGetGraphsForTheUserQueryKey = (userId: string) => [`/api/graph/${userId}/all`] as const;

export const getGetGraphsForTheUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getGraphsForTheUser>>,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getGraphsForTheUser>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<typeof getGraphsForTheUser>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGraphsForTheUserQueryKey(userId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGraphsForTheUser>>> = ({ signal }) =>
    getGraphsForTheUser(userId, signal);

  return { queryKey, queryFn, enabled: !!userId, ...queryOptions };
};

export type GetGraphsForTheUserQueryResult = NonNullable<Awaited<ReturnType<typeof getGraphsForTheUser>>>;
export type GetGraphsForTheUserQueryError = ErrorType<unknown>;

export const useGetGraphsForTheUser = <
  TData = Awaited<ReturnType<typeof getGraphsForTheUser>>,
  TError = ErrorType<unknown>,
>(
  userId: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getGraphsForTheUser>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetGraphsForTheUserQueryOptions(userId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGraphTypes = (signal?: AbortSignal) => {
  return apiClientInstance<KnowledgeGraphTypeDto[]>({ url: `/api/graph/types`, method: 'get', signal });
};

export const getGetGraphTypesQueryKey = () => [`/api/graph/types`] as const;

export const getGetGraphTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getGraphTypes>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getGraphTypes>>, TError, TData>;
}): UseQueryOptions<Awaited<ReturnType<typeof getGraphTypes>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGraphTypesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGraphTypes>>> = ({ signal }) => getGraphTypes(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetGraphTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getGraphTypes>>>;
export type GetGraphTypesQueryError = ErrorType<unknown>;

export const useGetGraphTypes = <
  TData = Awaited<ReturnType<typeof getGraphTypes>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getGraphTypes>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetGraphTypesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
